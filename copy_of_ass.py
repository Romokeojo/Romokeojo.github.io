# -*- coding: utf-8 -*-
"""Copy_of_Ass.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rLthVW2HJR2Lcd-sSp0CtVnpHZvVhWgB
"""

import ee
import geemap
ee.Authenticate()
ee.Initialize(project='dolapo')

from google.colab import drive
drive.mount('/content/drive')

"""Landsat 7 level 2, collection 2 surface reflectance from Google earth engine catalog"""

roi = ee.Geometry.Polygon([[70.3221626743, 36.8616809033], [70.3237213389,36.9519377063],
                           [70.4297078113, 36.9507087945], [70.4280244486, 36.8604559916]])
l7_collection = (ee.ImageCollection("LANDSAT/LE07/C02/T1_L2")
    .filterDate('2009-06-01', '2009-06-30')
    .filterBounds(roi))
# get collection metadata
l7_collection

"""Function to apply scale factors"""

def apply_scale_factors(image):
  optical_bands = image.select('SR_B.').multiply(0.0000275).add(-0.2)
  thermal_bands = image.select('ST_B6').multiply(0.00341802).add(149.0)
  return image.addBands(optical_bands, None, True).addBands(
      thermal_bands, None, True
  )

scaled_l7 = l7_collection.map(apply_scale_factors)
scaled_l7

least_cloudy = scaled_l7.sort('CLOUD_COVER', opt_ascending= True).first()
least_cloudy

# define the RGB bands
visualization = {
    'bands': ['SR_B3', 'SR_B2', 'SR_B1'],
    'min': 0.0,
    'max': 0.3}

"""Visualise the RGB bands"""

Map = geemap.Map()
Map.center_object(roi)
Map.add_basemap("HYBRID")
Map.addLayer(least_cloudy,vis_params=visualization,name="True color")
Map

"""Selection of Near-infrared and Red bands"""

nir= least_cloudy.select('SR_B4')
nir

red= least_cloudy.select('SR_B3')
red

"""Normalized difference vegetation index calculation
NDVI = nir-red/nir+red
"""

upper = nir.subtract(red)
lower = nir.add(red)

ndvi = upper.divide(lower)
ndvi

colour = {'palette': ['red', 'yellow', 'green'], min: 0, max: 1}

"""NDVI visualisation"""

Map2 = geemap.Map()
Map2.center_object(roi)
Map2.add_basemap("HYBRID")
Map2.addLayer(ndvi, vis_params=colour, name="first")
Map2

soi = ee.Geometry.Polygon([[70.3221626743, 36.8616809033], [70.3237213389,36.9519377063],
                           [70.4297078113, 36.9507087945], [70.4280244486, 36.8604559916]]
                          ).buffer(5000*5)

geemap.ee_export_image(ndvi.clip(roi), "/content/drive/MyDrive/ndvi3.tif", scale=1000000,
                       region=roi, file_per_band=False, format='ZIPPED_GEO_TIFF',
                unzip=True, unmask_value=None, timeout=300, proxies=None)

task = ee.batch.Export.image.toDrive(**{
    'image':ndvi,
    'scale':30,
    'region': roi.getInfo()['coordinates'],
    'fileFormat':'GeoTIFF',
    'description':'Active3',
    'folder':'GEE',
    'maxPixels':1e9
})
task.start()

Export.image.toDrive({
  image: ndvi,
  region: roi.roi().getInfo(),
  description: 'NDVI_export',
  scale: 10,
  maxPixels: 10E11,
  fileFormat: 'GeoTIFF',
})

feature = ee.Feature(roi, {})

shape = feature.geometry()
image = ndvi.clip(shape).unmask()
geemap.ee_export_image(
    image, filename=filename, scale=90, region=roi, file_per_band=False
)

feature = ee.Feature(roi, {})

shape = feature.geometry()
image = ndvi.clip(shape).unmask()
geemap.ee_export_image_to_drive(
    image, description='ndvitry', folder='project', region=shape, scale=30
)

geemap.ee_export_image(
ndvi.clip(roi),
description="test1",
    folder='project',
    fileNamePrefix=None,
    dimensions=None,
    region=roi,
    scale=30,
    crs=None,
    crsTransform=None,
    maxPixels=None,
    shardSize=None,
    fileDimensions=None,
    skipEmptyTiles=None,
    fileFormat='GEOTIFF',
    formatOptions=None
)

geemap.ee_export_image(ndvi, filename = 'new.tif', scale=30,
                region=roi, file_per_band=False, format='ZIPPED_GEO_TIFF',
                unzip=True, unmask_value=None, timeout=300, proxies=None)

ndvi_mean = ndvi.reduceRegion(
  reducer=ee.Reducer.mean(),
  geometry=roi,
  scale=30)

ndvi_mean.getInfo()